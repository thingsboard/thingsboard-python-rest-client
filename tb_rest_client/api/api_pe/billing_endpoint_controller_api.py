# coding: utf-8

"""
    ThingsBoard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tb_rest_client.api_client import ApiClient


class BillingEndpointControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def check_tenant_can_update_plan_using_post(self, can_update_plan_request, **kwargs):  # noqa: E501
        """checkTenantCanUpdatePlan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_tenant_can_update_plan_using_post(can_update_plan_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str can_update_plan_request: canUpdatePlanRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_tenant_can_update_plan_using_post_with_http_info(can_update_plan_request, **kwargs)  # noqa: E501
        else:
            (data) = self.check_tenant_can_update_plan_using_post_with_http_info(can_update_plan_request, **kwargs)  # noqa: E501
            return data

    def check_tenant_can_update_plan_using_post_with_http_info(self, can_update_plan_request, **kwargs):  # noqa: E501
        """checkTenantCanUpdatePlan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_tenant_can_update_plan_using_post_with_http_info(can_update_plan_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str can_update_plan_request: canUpdatePlanRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['can_update_plan_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_tenant_can_update_plan_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'can_update_plan_request' is set
        if self.api_client.client_side_validation and ('can_update_plan_request' not in params or
                                                       params['can_update_plan_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `can_update_plan_request` when calling `check_tenant_can_update_plan_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'can_update_plan_request' in params:
            body_params = params['can_update_plan_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/billingEndpoint/tenantCanUpdatePlan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notify_tenant_plan_changed_using_post(self, tenant_plan_changed_request, **kwargs):  # noqa: E501
        """notifyTenantPlanChanged  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notify_tenant_plan_changed_using_post(tenant_plan_changed_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_plan_changed_request: tenantPlanChangedRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notify_tenant_plan_changed_using_post_with_http_info(tenant_plan_changed_request, **kwargs)  # noqa: E501
        else:
            (data) = self.notify_tenant_plan_changed_using_post_with_http_info(tenant_plan_changed_request, **kwargs)  # noqa: E501
            return data

    def notify_tenant_plan_changed_using_post_with_http_info(self, tenant_plan_changed_request, **kwargs):  # noqa: E501
        """notifyTenantPlanChanged  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notify_tenant_plan_changed_using_post_with_http_info(tenant_plan_changed_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_plan_changed_request: tenantPlanChangedRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_plan_changed_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notify_tenant_plan_changed_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_plan_changed_request' is set
        if self.api_client.client_side_validation and ('tenant_plan_changed_request' not in params or
                                                       params['tenant_plan_changed_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_plan_changed_request` when calling `notify_tenant_plan_changed_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tenant_plan_changed_request' in params:
            body_params = params['tenant_plan_changed_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/billingEndpoint/tenantPlanChanged', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notify_tenant_state_changed_using_post(self, tenant_state_changed_request, **kwargs):  # noqa: E501
        """notifyTenantStateChanged  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notify_tenant_state_changed_using_post(tenant_state_changed_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_state_changed_request: tenantStateChangedRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notify_tenant_state_changed_using_post_with_http_info(tenant_state_changed_request, **kwargs)  # noqa: E501
        else:
            (data) = self.notify_tenant_state_changed_using_post_with_http_info(tenant_state_changed_request, **kwargs)  # noqa: E501
            return data

    def notify_tenant_state_changed_using_post_with_http_info(self, tenant_state_changed_request, **kwargs):  # noqa: E501
        """notifyTenantStateChanged  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notify_tenant_state_changed_using_post_with_http_info(tenant_state_changed_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_state_changed_request: tenantStateChangedRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_state_changed_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notify_tenant_state_changed_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_state_changed_request' is set
        if self.api_client.client_side_validation and ('tenant_state_changed_request' not in params or
                                                       params['tenant_state_changed_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tenant_state_changed_request` when calling `notify_tenant_state_changed_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tenant_state_changed_request' in params:
            body_params = params['tenant_state_changed_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/billingEndpoint/tenantStateChanged', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_account_activated_email_using_post(self, send_account_activated_email_request, **kwargs):  # noqa: E501
        """sendAccountActivatedEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_account_activated_email_using_post(send_account_activated_email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str send_account_activated_email_request: sendAccountActivatedEmailRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_account_activated_email_using_post_with_http_info(send_account_activated_email_request, **kwargs)  # noqa: E501
        else:
            (data) = self.send_account_activated_email_using_post_with_http_info(send_account_activated_email_request, **kwargs)  # noqa: E501
            return data

    def send_account_activated_email_using_post_with_http_info(self, send_account_activated_email_request, **kwargs):  # noqa: E501
        """sendAccountActivatedEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_account_activated_email_using_post_with_http_info(send_account_activated_email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str send_account_activated_email_request: sendAccountActivatedEmailRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['send_account_activated_email_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_account_activated_email_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'send_account_activated_email_request' is set
        if self.api_client.client_side_validation and ('send_account_activated_email_request' not in params or
                                                       params['send_account_activated_email_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `send_account_activated_email_request` when calling `send_account_activated_email_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'send_account_activated_email_request' in params:
            body_params = params['send_account_activated_email_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/billingEndpoint/sendAccountActivated', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_activation_email_using_post(self, send_activation_email_request, **kwargs):  # noqa: E501
        """sendActivationEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_activation_email_using_post(send_activation_email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str send_activation_email_request: sendActivationEmailRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_activation_email_using_post_with_http_info(send_activation_email_request, **kwargs)  # noqa: E501
        else:
            (data) = self.send_activation_email_using_post_with_http_info(send_activation_email_request, **kwargs)  # noqa: E501
            return data

    def send_activation_email_using_post_with_http_info(self, send_activation_email_request, **kwargs):  # noqa: E501
        """sendActivationEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_activation_email_using_post_with_http_info(send_activation_email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str send_activation_email_request: sendActivationEmailRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['send_activation_email_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_activation_email_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'send_activation_email_request' is set
        if self.api_client.client_side_validation and ('send_activation_email_request' not in params or
                                                       params['send_activation_email_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `send_activation_email_request` when calling `send_activation_email_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'send_activation_email_request' in params:
            body_params = params['send_activation_email_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/billingEndpoint/sendActivation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_password_was_reset_email_using_post(self, send_passoword_was_reset_email_request, **kwargs):  # noqa: E501
        """sendPasswordWasResetEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_password_was_reset_email_using_post(send_passoword_was_reset_email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str send_passoword_was_reset_email_request: sendPassowordWasResetEmailRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_password_was_reset_email_using_post_with_http_info(send_passoword_was_reset_email_request, **kwargs)  # noqa: E501
        else:
            (data) = self.send_password_was_reset_email_using_post_with_http_info(send_passoword_was_reset_email_request, **kwargs)  # noqa: E501
            return data

    def send_password_was_reset_email_using_post_with_http_info(self, send_passoword_was_reset_email_request, **kwargs):  # noqa: E501
        """sendPasswordWasResetEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_password_was_reset_email_using_post_with_http_info(send_passoword_was_reset_email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str send_passoword_was_reset_email_request: sendPassowordWasResetEmailRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['send_passoword_was_reset_email_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_password_was_reset_email_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'send_passoword_was_reset_email_request' is set
        if self.api_client.client_side_validation and ('send_passoword_was_reset_email_request' not in params or
                                                       params['send_passoword_was_reset_email_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `send_passoword_was_reset_email_request` when calling `send_password_was_reset_email_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'send_passoword_was_reset_email_request' in params:
            body_params = params['send_passoword_was_reset_email_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/billingEndpoint/sendPasswordWasReset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_reset_password_email_using_post(self, send_reset_password_email_request, **kwargs):  # noqa: E501
        """sendResetPasswordEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_reset_password_email_using_post(send_reset_password_email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str send_reset_password_email_request: sendResetPasswordEmailRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_reset_password_email_using_post_with_http_info(send_reset_password_email_request, **kwargs)  # noqa: E501
        else:
            (data) = self.send_reset_password_email_using_post_with_http_info(send_reset_password_email_request, **kwargs)  # noqa: E501
            return data

    def send_reset_password_email_using_post_with_http_info(self, send_reset_password_email_request, **kwargs):  # noqa: E501
        """sendResetPasswordEmail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_reset_password_email_using_post_with_http_info(send_reset_password_email_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str send_reset_password_email_request: sendResetPasswordEmailRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['send_reset_password_email_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_reset_password_email_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'send_reset_password_email_request' is set
        if self.api_client.client_side_validation and ('send_reset_password_email_request' not in params or
                                                       params['send_reset_password_email_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `send_reset_password_email_request` when calling `send_reset_password_email_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'send_reset_password_email_request' in params:
            body_params = params['send_reset_password_email_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/billingEndpoint/sendResetPassword', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_has_billing_read_using_get(self, **kwargs):  # noqa: E501
        """tenantHasBillingRead  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_has_billing_read_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_has_billing_read_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tenant_has_billing_read_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tenant_has_billing_read_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """tenantHasBillingRead  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_has_billing_read_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_has_billing_read_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/billingEndpoint/tenant/permission/billing/read', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tenant_has_billing_write_using_get(self, **kwargs):  # noqa: E501
        """tenantHasBillingWrite  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_has_billing_write_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tenant_has_billing_write_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tenant_has_billing_write_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def tenant_has_billing_write_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """tenantHasBillingWrite  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tenant_has_billing_write_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tenant_has_billing_write_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/billingEndpoint/tenant/permission/billing/write', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)