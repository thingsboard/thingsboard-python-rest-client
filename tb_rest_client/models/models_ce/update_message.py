# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 3.5.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2023. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class UpdateMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'update_available': 'bool',
        'current_version': 'str',
        'latest_version': 'str',
        'upgrade_instructions_url': 'str',
        'current_version_release_notes_url': 'str',
        'latest_version_release_notes_url': 'str'
    }

    attribute_map = {
        'update_available': 'updateAvailable',
        'current_version': 'currentVersion',
        'latest_version': 'latestVersion',
        'upgrade_instructions_url': 'upgradeInstructionsUrl',
        'current_version_release_notes_url': 'currentVersionReleaseNotesUrl',
        'latest_version_release_notes_url': 'latestVersionReleaseNotesUrl'
    }

    def __init__(self, update_available=None, current_version=None, latest_version=None, upgrade_instructions_url=None, current_version_release_notes_url=None, latest_version_release_notes_url=None):  # noqa: E501
        """UpdateMessage - a model defined in Swagger"""  # noqa: E501
        self._update_available = None
        self._current_version = None
        self._latest_version = None
        self._upgrade_instructions_url = None
        self._current_version_release_notes_url = None
        self._latest_version_release_notes_url = None
        self.discriminator = None
        if update_available is not None:
            self.update_available = update_available
        if current_version is not None:
            self.current_version = current_version
        if latest_version is not None:
            self.latest_version = latest_version
        if upgrade_instructions_url is not None:
            self.upgrade_instructions_url = upgrade_instructions_url
        if current_version_release_notes_url is not None:
            self.current_version_release_notes_url = current_version_release_notes_url
        if latest_version_release_notes_url is not None:
            self.latest_version_release_notes_url = latest_version_release_notes_url

    @property
    def update_available(self):
        """Gets the update_available of this UpdateMessage.  # noqa: E501

        'True' if new platform update is available.  # noqa: E501

        :return: The update_available of this UpdateMessage.  # noqa: E501
        :rtype: bool
        """
        return self._update_available

    @update_available.setter
    def update_available(self, update_available):
        """Sets the update_available of this UpdateMessage.

        'True' if new platform update is available.  # noqa: E501

        :param update_available: The update_available of this UpdateMessage.  # noqa: E501
        :type: bool
        """

        self._update_available = update_available

    @property
    def current_version(self):
        """Gets the current_version of this UpdateMessage.  # noqa: E501

        Current ThingsBoard version.  # noqa: E501

        :return: The current_version of this UpdateMessage.  # noqa: E501
        :rtype: str
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this UpdateMessage.

        Current ThingsBoard version.  # noqa: E501

        :param current_version: The current_version of this UpdateMessage.  # noqa: E501
        :type: str
        """

        self._current_version = current_version

    @property
    def latest_version(self):
        """Gets the latest_version of this UpdateMessage.  # noqa: E501

        Latest ThingsBoard version.  # noqa: E501

        :return: The latest_version of this UpdateMessage.  # noqa: E501
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this UpdateMessage.

        Latest ThingsBoard version.  # noqa: E501

        :param latest_version: The latest_version of this UpdateMessage.  # noqa: E501
        :type: str
        """

        self._latest_version = latest_version

    @property
    def upgrade_instructions_url(self):
        """Gets the upgrade_instructions_url of this UpdateMessage.  # noqa: E501

        Upgrade instructions URL.  # noqa: E501

        :return: The upgrade_instructions_url of this UpdateMessage.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_instructions_url

    @upgrade_instructions_url.setter
    def upgrade_instructions_url(self, upgrade_instructions_url):
        """Sets the upgrade_instructions_url of this UpdateMessage.

        Upgrade instructions URL.  # noqa: E501

        :param upgrade_instructions_url: The upgrade_instructions_url of this UpdateMessage.  # noqa: E501
        :type: str
        """

        self._upgrade_instructions_url = upgrade_instructions_url

    @property
    def current_version_release_notes_url(self):
        """Gets the current_version_release_notes_url of this UpdateMessage.  # noqa: E501

        Current ThingsBoard version release notes URL.  # noqa: E501

        :return: The current_version_release_notes_url of this UpdateMessage.  # noqa: E501
        :rtype: str
        """
        return self._current_version_release_notes_url

    @current_version_release_notes_url.setter
    def current_version_release_notes_url(self, current_version_release_notes_url):
        """Sets the current_version_release_notes_url of this UpdateMessage.

        Current ThingsBoard version release notes URL.  # noqa: E501

        :param current_version_release_notes_url: The current_version_release_notes_url of this UpdateMessage.  # noqa: E501
        :type: str
        """

        self._current_version_release_notes_url = current_version_release_notes_url

    @property
    def latest_version_release_notes_url(self):
        """Gets the latest_version_release_notes_url of this UpdateMessage.  # noqa: E501

        Latest ThingsBoard version release notes URL.  # noqa: E501

        :return: The latest_version_release_notes_url of this UpdateMessage.  # noqa: E501
        :rtype: str
        """
        return self._latest_version_release_notes_url

    @latest_version_release_notes_url.setter
    def latest_version_release_notes_url(self, latest_version_release_notes_url):
        """Sets the latest_version_release_notes_url of this UpdateMessage.

        Latest ThingsBoard version release notes URL.  # noqa: E501

        :param latest_version_release_notes_url: The latest_version_release_notes_url of this UpdateMessage.  # noqa: E501
        :type: str
        """

        self._latest_version_release_notes_url = latest_version_release_notes_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
