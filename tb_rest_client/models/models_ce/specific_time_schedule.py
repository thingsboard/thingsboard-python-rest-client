# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 3.5.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2023. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class SpecificTimeSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'days_of_week': 'list[int]',
        'dynamic_value': 'DynamicValuestring',
        'ends_on': 'int',
        'starts_on': 'int',
        'timezone': 'str',
        'type': 'str'
    }

    attribute_map = {
        'days_of_week': 'daysOfWeek',
        'dynamic_value': 'dynamicValue',
        'ends_on': 'endsOn',
        'starts_on': 'startsOn',
        'timezone': 'timezone',
        'type': 'type'
    }

    def __init__(self, days_of_week=None, dynamic_value=None, ends_on=None, starts_on=None, timezone=None, type=None):  # noqa: E501
        """SpecificTimeSchedule - a model defined in Swagger"""  # noqa: E501
        self._days_of_week = None
        self._dynamic_value = None
        self._ends_on = None
        self._starts_on = None
        self._timezone = None
        self._type = None
        self.discriminator = None
        if days_of_week is not None:
            self.days_of_week = days_of_week
        if dynamic_value is not None:
            self.dynamic_value = dynamic_value
        if ends_on is not None:
            self.ends_on = ends_on
        if starts_on is not None:
            self.starts_on = starts_on
        if timezone is not None:
            self.timezone = timezone
        if type is not None:
            self.type = type

    @property
    def days_of_week(self):
        """Gets the days_of_week of this SpecificTimeSchedule.  # noqa: E501


        :return: The days_of_week of this SpecificTimeSchedule.  # noqa: E501
        :rtype: list[int]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this SpecificTimeSchedule.


        :param days_of_week: The days_of_week of this SpecificTimeSchedule.  # noqa: E501
        :type: list[int]
        """

        self._days_of_week = days_of_week

    @property
    def dynamic_value(self):
        """Gets the dynamic_value of this SpecificTimeSchedule.  # noqa: E501


        :return: The dynamic_value of this SpecificTimeSchedule.  # noqa: E501
        :rtype: DynamicValuestring
        """
        return self._dynamic_value

    @dynamic_value.setter
    def dynamic_value(self, dynamic_value):
        """Sets the dynamic_value of this SpecificTimeSchedule.


        :param dynamic_value: The dynamic_value of this SpecificTimeSchedule.  # noqa: E501
        :type: DynamicValuestring
        """

        self._dynamic_value = dynamic_value

    @property
    def ends_on(self):
        """Gets the ends_on of this SpecificTimeSchedule.  # noqa: E501


        :return: The ends_on of this SpecificTimeSchedule.  # noqa: E501
        :rtype: int
        """
        return self._ends_on

    @ends_on.setter
    def ends_on(self, ends_on):
        """Sets the ends_on of this SpecificTimeSchedule.


        :param ends_on: The ends_on of this SpecificTimeSchedule.  # noqa: E501
        :type: int
        """

        self._ends_on = ends_on

    @property
    def starts_on(self):
        """Gets the starts_on of this SpecificTimeSchedule.  # noqa: E501


        :return: The starts_on of this SpecificTimeSchedule.  # noqa: E501
        :rtype: int
        """
        return self._starts_on

    @starts_on.setter
    def starts_on(self, starts_on):
        """Sets the starts_on of this SpecificTimeSchedule.


        :param starts_on: The starts_on of this SpecificTimeSchedule.  # noqa: E501
        :type: int
        """

        self._starts_on = starts_on

    @property
    def timezone(self):
        """Gets the timezone of this SpecificTimeSchedule.  # noqa: E501


        :return: The timezone of this SpecificTimeSchedule.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SpecificTimeSchedule.


        :param timezone: The timezone of this SpecificTimeSchedule.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this SpecificTimeSchedule.  # noqa: E501


        :return: The type of this SpecificTimeSchedule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SpecificTimeSchedule.


        :param type: The type of this SpecificTimeSchedule.  # noqa: E501
        :type: str
        """
        allowed_values = ["ANY_TIME", "CUSTOM", "SPECIFIC_TIME"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecificTimeSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecificTimeSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
