# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 3.5.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2023. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class DefaultTenantProfileConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alarms_ttl_days': 'int',
        'cassandra_query_tenant_rate_limits_configuration': 'str',
        'customer_server_rest_limits_configuration': 'str',
        'default_storage_ttl_days': 'int',
        'max_assets': 'int',
        'max_created_alarms': 'int',
        'max_customers': 'int',
        'max_dp_storage_days': 'int',
        'max_dashboards': 'int',
        'max_devices': 'int',
        'max_emails': 'int',
        'max_js_executions': 'int',
        'max_ota_packages_in_bytes': 'int',
        'max_re_executions': 'int',
        'max_resources_in_bytes': 'int',
        'max_rule_chains': 'int',
        'max_rule_node_executions_per_message': 'int',
        'max_sms': 'int',
        'max_transport_data_points': 'int',
        'max_transport_messages': 'int',
        'max_users': 'int',
        'max_ws_sessions_per_customer': 'int',
        'max_ws_sessions_per_public_user': 'int',
        'max_ws_sessions_per_regular_user': 'int',
        'max_ws_sessions_per_tenant': 'int',
        'max_ws_subscriptions_per_customer': 'int',
        'max_ws_subscriptions_per_public_user': 'int',
        'max_ws_subscriptions_per_regular_user': 'int',
        'max_ws_subscriptions_per_tenant': 'int',
        'rpc_ttl_days': 'int',
        'tenant_entity_export_rate_limit': 'str',
        'tenant_entity_import_rate_limit': 'str',
        'tenant_notification_requests_per_rule_rate_limit': 'str',
        'tenant_notification_requests_rate_limit': 'str',
        'tenant_server_rest_limits_configuration': 'str',
        'transport_device_msg_rate_limit': 'str',
        'transport_device_telemetry_data_points_rate_limit': 'str',
        'transport_device_telemetry_msg_rate_limit': 'str',
        'transport_tenant_msg_rate_limit': 'str',
        'transport_tenant_telemetry_data_points_rate_limit': 'str',
        'transport_tenant_telemetry_msg_rate_limit': 'str',
        'warn_threshold': 'float',
        'ws_msg_queue_limit_per_session': 'int',
        'ws_updates_per_session_rate_limit': 'str'
    }

    attribute_map = {
        'alarms_ttl_days': 'alarmsTtlDays',
        'cassandra_query_tenant_rate_limits_configuration': 'cassandraQueryTenantRateLimitsConfiguration',
        'customer_server_rest_limits_configuration': 'customerServerRestLimitsConfiguration',
        'default_storage_ttl_days': 'defaultStorageTtlDays',
        'max_assets': 'maxAssets',
        'max_created_alarms': 'maxCreatedAlarms',
        'max_customers': 'maxCustomers',
        'max_dp_storage_days': 'maxDPStorageDays',
        'max_dashboards': 'maxDashboards',
        'max_devices': 'maxDevices',
        'max_emails': 'maxEmails',
        'max_js_executions': 'maxJSExecutions',
        'max_ota_packages_in_bytes': 'maxOtaPackagesInBytes',
        'max_re_executions': 'maxREExecutions',
        'max_resources_in_bytes': 'maxResourcesInBytes',
        'max_rule_chains': 'maxRuleChains',
        'max_rule_node_executions_per_message': 'maxRuleNodeExecutionsPerMessage',
        'max_sms': 'maxSms',
        'max_transport_data_points': 'maxTransportDataPoints',
        'max_transport_messages': 'maxTransportMessages',
        'max_users': 'maxUsers',
        'max_ws_sessions_per_customer': 'maxWsSessionsPerCustomer',
        'max_ws_sessions_per_public_user': 'maxWsSessionsPerPublicUser',
        'max_ws_sessions_per_regular_user': 'maxWsSessionsPerRegularUser',
        'max_ws_sessions_per_tenant': 'maxWsSessionsPerTenant',
        'max_ws_subscriptions_per_customer': 'maxWsSubscriptionsPerCustomer',
        'max_ws_subscriptions_per_public_user': 'maxWsSubscriptionsPerPublicUser',
        'max_ws_subscriptions_per_regular_user': 'maxWsSubscriptionsPerRegularUser',
        'max_ws_subscriptions_per_tenant': 'maxWsSubscriptionsPerTenant',
        'rpc_ttl_days': 'rpcTtlDays',
        'tenant_entity_export_rate_limit': 'tenantEntityExportRateLimit',
        'tenant_entity_import_rate_limit': 'tenantEntityImportRateLimit',
        'tenant_notification_requests_per_rule_rate_limit': 'tenantNotificationRequestsPerRuleRateLimit',
        'tenant_notification_requests_rate_limit': 'tenantNotificationRequestsRateLimit',
        'tenant_server_rest_limits_configuration': 'tenantServerRestLimitsConfiguration',
        'transport_device_msg_rate_limit': 'transportDeviceMsgRateLimit',
        'transport_device_telemetry_data_points_rate_limit': 'transportDeviceTelemetryDataPointsRateLimit',
        'transport_device_telemetry_msg_rate_limit': 'transportDeviceTelemetryMsgRateLimit',
        'transport_tenant_msg_rate_limit': 'transportTenantMsgRateLimit',
        'transport_tenant_telemetry_data_points_rate_limit': 'transportTenantTelemetryDataPointsRateLimit',
        'transport_tenant_telemetry_msg_rate_limit': 'transportTenantTelemetryMsgRateLimit',
        'warn_threshold': 'warnThreshold',
        'ws_msg_queue_limit_per_session': 'wsMsgQueueLimitPerSession',
        'ws_updates_per_session_rate_limit': 'wsUpdatesPerSessionRateLimit'
    }

    def __init__(self, alarms_ttl_days=None, cassandra_query_tenant_rate_limits_configuration=None, customer_server_rest_limits_configuration=None, default_storage_ttl_days=None, max_assets=None, max_created_alarms=None, max_customers=None, max_dp_storage_days=None, max_dashboards=None, max_devices=None, max_emails=None, max_js_executions=None, max_ota_packages_in_bytes=None, max_re_executions=None, max_resources_in_bytes=None, max_rule_chains=None, max_rule_node_executions_per_message=None, max_sms=None, max_transport_data_points=None, max_transport_messages=None, max_users=None, max_ws_sessions_per_customer=None, max_ws_sessions_per_public_user=None, max_ws_sessions_per_regular_user=None, max_ws_sessions_per_tenant=None, max_ws_subscriptions_per_customer=None, max_ws_subscriptions_per_public_user=None, max_ws_subscriptions_per_regular_user=None, max_ws_subscriptions_per_tenant=None, rpc_ttl_days=None, tenant_entity_export_rate_limit=None, tenant_entity_import_rate_limit=None, tenant_notification_requests_per_rule_rate_limit=None, tenant_notification_requests_rate_limit=None, tenant_server_rest_limits_configuration=None, transport_device_msg_rate_limit=None, transport_device_telemetry_data_points_rate_limit=None, transport_device_telemetry_msg_rate_limit=None, transport_tenant_msg_rate_limit=None, transport_tenant_telemetry_data_points_rate_limit=None, transport_tenant_telemetry_msg_rate_limit=None, warn_threshold=None, ws_msg_queue_limit_per_session=None, ws_updates_per_session_rate_limit=None):  # noqa: E501
        """DefaultTenantProfileConfiguration - a model defined in Swagger"""  # noqa: E501
        self._alarms_ttl_days = None
        self._cassandra_query_tenant_rate_limits_configuration = None
        self._customer_server_rest_limits_configuration = None
        self._default_storage_ttl_days = None
        self._max_assets = None
        self._max_created_alarms = None
        self._max_customers = None
        self._max_dp_storage_days = None
        self._max_dashboards = None
        self._max_devices = None
        self._max_emails = None
        self._max_js_executions = None
        self._max_ota_packages_in_bytes = None
        self._max_re_executions = None
        self._max_resources_in_bytes = None
        self._max_rule_chains = None
        self._max_rule_node_executions_per_message = None
        self._max_sms = None
        self._max_transport_data_points = None
        self._max_transport_messages = None
        self._max_users = None
        self._max_ws_sessions_per_customer = None
        self._max_ws_sessions_per_public_user = None
        self._max_ws_sessions_per_regular_user = None
        self._max_ws_sessions_per_tenant = None
        self._max_ws_subscriptions_per_customer = None
        self._max_ws_subscriptions_per_public_user = None
        self._max_ws_subscriptions_per_regular_user = None
        self._max_ws_subscriptions_per_tenant = None
        self._rpc_ttl_days = None
        self._tenant_entity_export_rate_limit = None
        self._tenant_entity_import_rate_limit = None
        self._tenant_notification_requests_per_rule_rate_limit = None
        self._tenant_notification_requests_rate_limit = None
        self._tenant_server_rest_limits_configuration = None
        self._transport_device_msg_rate_limit = None
        self._transport_device_telemetry_data_points_rate_limit = None
        self._transport_device_telemetry_msg_rate_limit = None
        self._transport_tenant_msg_rate_limit = None
        self._transport_tenant_telemetry_data_points_rate_limit = None
        self._transport_tenant_telemetry_msg_rate_limit = None
        self._warn_threshold = None
        self._ws_msg_queue_limit_per_session = None
        self._ws_updates_per_session_rate_limit = None
        self.discriminator = None
        if alarms_ttl_days is not None:
            self.alarms_ttl_days = alarms_ttl_days
        if cassandra_query_tenant_rate_limits_configuration is not None:
            self.cassandra_query_tenant_rate_limits_configuration = cassandra_query_tenant_rate_limits_configuration
        if customer_server_rest_limits_configuration is not None:
            self.customer_server_rest_limits_configuration = customer_server_rest_limits_configuration
        if default_storage_ttl_days is not None:
            self.default_storage_ttl_days = default_storage_ttl_days
        if max_assets is not None:
            self.max_assets = max_assets
        if max_created_alarms is not None:
            self.max_created_alarms = max_created_alarms
        if max_customers is not None:
            self.max_customers = max_customers
        if max_dp_storage_days is not None:
            self.max_dp_storage_days = max_dp_storage_days
        if max_dashboards is not None:
            self.max_dashboards = max_dashboards
        if max_devices is not None:
            self.max_devices = max_devices
        if max_emails is not None:
            self.max_emails = max_emails
        if max_js_executions is not None:
            self.max_js_executions = max_js_executions
        if max_ota_packages_in_bytes is not None:
            self.max_ota_packages_in_bytes = max_ota_packages_in_bytes
        if max_re_executions is not None:
            self.max_re_executions = max_re_executions
        if max_resources_in_bytes is not None:
            self.max_resources_in_bytes = max_resources_in_bytes
        if max_rule_chains is not None:
            self.max_rule_chains = max_rule_chains
        if max_rule_node_executions_per_message is not None:
            self.max_rule_node_executions_per_message = max_rule_node_executions_per_message
        if max_sms is not None:
            self.max_sms = max_sms
        if max_transport_data_points is not None:
            self.max_transport_data_points = max_transport_data_points
        if max_transport_messages is not None:
            self.max_transport_messages = max_transport_messages
        if max_users is not None:
            self.max_users = max_users
        if max_ws_sessions_per_customer is not None:
            self.max_ws_sessions_per_customer = max_ws_sessions_per_customer
        if max_ws_sessions_per_public_user is not None:
            self.max_ws_sessions_per_public_user = max_ws_sessions_per_public_user
        if max_ws_sessions_per_regular_user is not None:
            self.max_ws_sessions_per_regular_user = max_ws_sessions_per_regular_user
        if max_ws_sessions_per_tenant is not None:
            self.max_ws_sessions_per_tenant = max_ws_sessions_per_tenant
        if max_ws_subscriptions_per_customer is not None:
            self.max_ws_subscriptions_per_customer = max_ws_subscriptions_per_customer
        if max_ws_subscriptions_per_public_user is not None:
            self.max_ws_subscriptions_per_public_user = max_ws_subscriptions_per_public_user
        if max_ws_subscriptions_per_regular_user is not None:
            self.max_ws_subscriptions_per_regular_user = max_ws_subscriptions_per_regular_user
        if max_ws_subscriptions_per_tenant is not None:
            self.max_ws_subscriptions_per_tenant = max_ws_subscriptions_per_tenant
        if rpc_ttl_days is not None:
            self.rpc_ttl_days = rpc_ttl_days
        if tenant_entity_export_rate_limit is not None:
            self.tenant_entity_export_rate_limit = tenant_entity_export_rate_limit
        if tenant_entity_import_rate_limit is not None:
            self.tenant_entity_import_rate_limit = tenant_entity_import_rate_limit
        if tenant_notification_requests_per_rule_rate_limit is not None:
            self.tenant_notification_requests_per_rule_rate_limit = tenant_notification_requests_per_rule_rate_limit
        if tenant_notification_requests_rate_limit is not None:
            self.tenant_notification_requests_rate_limit = tenant_notification_requests_rate_limit
        if tenant_server_rest_limits_configuration is not None:
            self.tenant_server_rest_limits_configuration = tenant_server_rest_limits_configuration
        if transport_device_msg_rate_limit is not None:
            self.transport_device_msg_rate_limit = transport_device_msg_rate_limit
        if transport_device_telemetry_data_points_rate_limit is not None:
            self.transport_device_telemetry_data_points_rate_limit = transport_device_telemetry_data_points_rate_limit
        if transport_device_telemetry_msg_rate_limit is not None:
            self.transport_device_telemetry_msg_rate_limit = transport_device_telemetry_msg_rate_limit
        if transport_tenant_msg_rate_limit is not None:
            self.transport_tenant_msg_rate_limit = transport_tenant_msg_rate_limit
        if transport_tenant_telemetry_data_points_rate_limit is not None:
            self.transport_tenant_telemetry_data_points_rate_limit = transport_tenant_telemetry_data_points_rate_limit
        if transport_tenant_telemetry_msg_rate_limit is not None:
            self.transport_tenant_telemetry_msg_rate_limit = transport_tenant_telemetry_msg_rate_limit
        if warn_threshold is not None:
            self.warn_threshold = warn_threshold
        if ws_msg_queue_limit_per_session is not None:
            self.ws_msg_queue_limit_per_session = ws_msg_queue_limit_per_session
        if ws_updates_per_session_rate_limit is not None:
            self.ws_updates_per_session_rate_limit = ws_updates_per_session_rate_limit

    @property
    def alarms_ttl_days(self):
        """Gets the alarms_ttl_days of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The alarms_ttl_days of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._alarms_ttl_days

    @alarms_ttl_days.setter
    def alarms_ttl_days(self, alarms_ttl_days):
        """Sets the alarms_ttl_days of this DefaultTenantProfileConfiguration.


        :param alarms_ttl_days: The alarms_ttl_days of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._alarms_ttl_days = alarms_ttl_days

    @property
    def cassandra_query_tenant_rate_limits_configuration(self):
        """Gets the cassandra_query_tenant_rate_limits_configuration of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The cassandra_query_tenant_rate_limits_configuration of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cassandra_query_tenant_rate_limits_configuration

    @cassandra_query_tenant_rate_limits_configuration.setter
    def cassandra_query_tenant_rate_limits_configuration(self, cassandra_query_tenant_rate_limits_configuration):
        """Sets the cassandra_query_tenant_rate_limits_configuration of this DefaultTenantProfileConfiguration.


        :param cassandra_query_tenant_rate_limits_configuration: The cassandra_query_tenant_rate_limits_configuration of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._cassandra_query_tenant_rate_limits_configuration = cassandra_query_tenant_rate_limits_configuration

    @property
    def customer_server_rest_limits_configuration(self):
        """Gets the customer_server_rest_limits_configuration of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The customer_server_rest_limits_configuration of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._customer_server_rest_limits_configuration

    @customer_server_rest_limits_configuration.setter
    def customer_server_rest_limits_configuration(self, customer_server_rest_limits_configuration):
        """Sets the customer_server_rest_limits_configuration of this DefaultTenantProfileConfiguration.


        :param customer_server_rest_limits_configuration: The customer_server_rest_limits_configuration of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._customer_server_rest_limits_configuration = customer_server_rest_limits_configuration

    @property
    def default_storage_ttl_days(self):
        """Gets the default_storage_ttl_days of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The default_storage_ttl_days of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._default_storage_ttl_days

    @default_storage_ttl_days.setter
    def default_storage_ttl_days(self, default_storage_ttl_days):
        """Sets the default_storage_ttl_days of this DefaultTenantProfileConfiguration.


        :param default_storage_ttl_days: The default_storage_ttl_days of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._default_storage_ttl_days = default_storage_ttl_days

    @property
    def max_assets(self):
        """Gets the max_assets of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_assets of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_assets

    @max_assets.setter
    def max_assets(self, max_assets):
        """Sets the max_assets of this DefaultTenantProfileConfiguration.


        :param max_assets: The max_assets of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_assets = max_assets

    @property
    def max_created_alarms(self):
        """Gets the max_created_alarms of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_created_alarms of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_created_alarms

    @max_created_alarms.setter
    def max_created_alarms(self, max_created_alarms):
        """Sets the max_created_alarms of this DefaultTenantProfileConfiguration.


        :param max_created_alarms: The max_created_alarms of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_created_alarms = max_created_alarms

    @property
    def max_customers(self):
        """Gets the max_customers of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_customers of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_customers

    @max_customers.setter
    def max_customers(self, max_customers):
        """Sets the max_customers of this DefaultTenantProfileConfiguration.


        :param max_customers: The max_customers of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_customers = max_customers

    @property
    def max_dp_storage_days(self):
        """Gets the max_dp_storage_days of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_dp_storage_days of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_dp_storage_days

    @max_dp_storage_days.setter
    def max_dp_storage_days(self, max_dp_storage_days):
        """Sets the max_dp_storage_days of this DefaultTenantProfileConfiguration.


        :param max_dp_storage_days: The max_dp_storage_days of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_dp_storage_days = max_dp_storage_days

    @property
    def max_dashboards(self):
        """Gets the max_dashboards of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_dashboards of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_dashboards

    @max_dashboards.setter
    def max_dashboards(self, max_dashboards):
        """Sets the max_dashboards of this DefaultTenantProfileConfiguration.


        :param max_dashboards: The max_dashboards of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_dashboards = max_dashboards

    @property
    def max_devices(self):
        """Gets the max_devices of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_devices of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_devices

    @max_devices.setter
    def max_devices(self, max_devices):
        """Sets the max_devices of this DefaultTenantProfileConfiguration.


        :param max_devices: The max_devices of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_devices = max_devices

    @property
    def max_emails(self):
        """Gets the max_emails of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_emails of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_emails

    @max_emails.setter
    def max_emails(self, max_emails):
        """Sets the max_emails of this DefaultTenantProfileConfiguration.


        :param max_emails: The max_emails of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_emails = max_emails

    @property
    def max_js_executions(self):
        """Gets the max_js_executions of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_js_executions of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_js_executions

    @max_js_executions.setter
    def max_js_executions(self, max_js_executions):
        """Sets the max_js_executions of this DefaultTenantProfileConfiguration.


        :param max_js_executions: The max_js_executions of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_js_executions = max_js_executions

    @property
    def max_ota_packages_in_bytes(self):
        """Gets the max_ota_packages_in_bytes of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_ota_packages_in_bytes of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_ota_packages_in_bytes

    @max_ota_packages_in_bytes.setter
    def max_ota_packages_in_bytes(self, max_ota_packages_in_bytes):
        """Sets the max_ota_packages_in_bytes of this DefaultTenantProfileConfiguration.


        :param max_ota_packages_in_bytes: The max_ota_packages_in_bytes of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_ota_packages_in_bytes = max_ota_packages_in_bytes

    @property
    def max_re_executions(self):
        """Gets the max_re_executions of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_re_executions of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_re_executions

    @max_re_executions.setter
    def max_re_executions(self, max_re_executions):
        """Sets the max_re_executions of this DefaultTenantProfileConfiguration.


        :param max_re_executions: The max_re_executions of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_re_executions = max_re_executions

    @property
    def max_resources_in_bytes(self):
        """Gets the max_resources_in_bytes of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_resources_in_bytes of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_resources_in_bytes

    @max_resources_in_bytes.setter
    def max_resources_in_bytes(self, max_resources_in_bytes):
        """Sets the max_resources_in_bytes of this DefaultTenantProfileConfiguration.


        :param max_resources_in_bytes: The max_resources_in_bytes of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_resources_in_bytes = max_resources_in_bytes

    @property
    def max_rule_chains(self):
        """Gets the max_rule_chains of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_rule_chains of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_rule_chains

    @max_rule_chains.setter
    def max_rule_chains(self, max_rule_chains):
        """Sets the max_rule_chains of this DefaultTenantProfileConfiguration.


        :param max_rule_chains: The max_rule_chains of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_rule_chains = max_rule_chains

    @property
    def max_rule_node_executions_per_message(self):
        """Gets the max_rule_node_executions_per_message of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_rule_node_executions_per_message of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_rule_node_executions_per_message

    @max_rule_node_executions_per_message.setter
    def max_rule_node_executions_per_message(self, max_rule_node_executions_per_message):
        """Sets the max_rule_node_executions_per_message of this DefaultTenantProfileConfiguration.


        :param max_rule_node_executions_per_message: The max_rule_node_executions_per_message of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_rule_node_executions_per_message = max_rule_node_executions_per_message

    @property
    def max_sms(self):
        """Gets the max_sms of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_sms of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_sms

    @max_sms.setter
    def max_sms(self, max_sms):
        """Sets the max_sms of this DefaultTenantProfileConfiguration.


        :param max_sms: The max_sms of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_sms = max_sms

    @property
    def max_transport_data_points(self):
        """Gets the max_transport_data_points of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_transport_data_points of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_transport_data_points

    @max_transport_data_points.setter
    def max_transport_data_points(self, max_transport_data_points):
        """Sets the max_transport_data_points of this DefaultTenantProfileConfiguration.


        :param max_transport_data_points: The max_transport_data_points of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_transport_data_points = max_transport_data_points

    @property
    def max_transport_messages(self):
        """Gets the max_transport_messages of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_transport_messages of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_transport_messages

    @max_transport_messages.setter
    def max_transport_messages(self, max_transport_messages):
        """Sets the max_transport_messages of this DefaultTenantProfileConfiguration.


        :param max_transport_messages: The max_transport_messages of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_transport_messages = max_transport_messages

    @property
    def max_users(self):
        """Gets the max_users of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_users of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this DefaultTenantProfileConfiguration.


        :param max_users: The max_users of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_users = max_users

    @property
    def max_ws_sessions_per_customer(self):
        """Gets the max_ws_sessions_per_customer of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_ws_sessions_per_customer of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_ws_sessions_per_customer

    @max_ws_sessions_per_customer.setter
    def max_ws_sessions_per_customer(self, max_ws_sessions_per_customer):
        """Sets the max_ws_sessions_per_customer of this DefaultTenantProfileConfiguration.


        :param max_ws_sessions_per_customer: The max_ws_sessions_per_customer of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_ws_sessions_per_customer = max_ws_sessions_per_customer

    @property
    def max_ws_sessions_per_public_user(self):
        """Gets the max_ws_sessions_per_public_user of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_ws_sessions_per_public_user of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_ws_sessions_per_public_user

    @max_ws_sessions_per_public_user.setter
    def max_ws_sessions_per_public_user(self, max_ws_sessions_per_public_user):
        """Sets the max_ws_sessions_per_public_user of this DefaultTenantProfileConfiguration.


        :param max_ws_sessions_per_public_user: The max_ws_sessions_per_public_user of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_ws_sessions_per_public_user = max_ws_sessions_per_public_user

    @property
    def max_ws_sessions_per_regular_user(self):
        """Gets the max_ws_sessions_per_regular_user of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_ws_sessions_per_regular_user of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_ws_sessions_per_regular_user

    @max_ws_sessions_per_regular_user.setter
    def max_ws_sessions_per_regular_user(self, max_ws_sessions_per_regular_user):
        """Sets the max_ws_sessions_per_regular_user of this DefaultTenantProfileConfiguration.


        :param max_ws_sessions_per_regular_user: The max_ws_sessions_per_regular_user of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_ws_sessions_per_regular_user = max_ws_sessions_per_regular_user

    @property
    def max_ws_sessions_per_tenant(self):
        """Gets the max_ws_sessions_per_tenant of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_ws_sessions_per_tenant of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_ws_sessions_per_tenant

    @max_ws_sessions_per_tenant.setter
    def max_ws_sessions_per_tenant(self, max_ws_sessions_per_tenant):
        """Sets the max_ws_sessions_per_tenant of this DefaultTenantProfileConfiguration.


        :param max_ws_sessions_per_tenant: The max_ws_sessions_per_tenant of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_ws_sessions_per_tenant = max_ws_sessions_per_tenant

    @property
    def max_ws_subscriptions_per_customer(self):
        """Gets the max_ws_subscriptions_per_customer of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_ws_subscriptions_per_customer of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_ws_subscriptions_per_customer

    @max_ws_subscriptions_per_customer.setter
    def max_ws_subscriptions_per_customer(self, max_ws_subscriptions_per_customer):
        """Sets the max_ws_subscriptions_per_customer of this DefaultTenantProfileConfiguration.


        :param max_ws_subscriptions_per_customer: The max_ws_subscriptions_per_customer of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_ws_subscriptions_per_customer = max_ws_subscriptions_per_customer

    @property
    def max_ws_subscriptions_per_public_user(self):
        """Gets the max_ws_subscriptions_per_public_user of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_ws_subscriptions_per_public_user of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_ws_subscriptions_per_public_user

    @max_ws_subscriptions_per_public_user.setter
    def max_ws_subscriptions_per_public_user(self, max_ws_subscriptions_per_public_user):
        """Sets the max_ws_subscriptions_per_public_user of this DefaultTenantProfileConfiguration.


        :param max_ws_subscriptions_per_public_user: The max_ws_subscriptions_per_public_user of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_ws_subscriptions_per_public_user = max_ws_subscriptions_per_public_user

    @property
    def max_ws_subscriptions_per_regular_user(self):
        """Gets the max_ws_subscriptions_per_regular_user of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_ws_subscriptions_per_regular_user of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_ws_subscriptions_per_regular_user

    @max_ws_subscriptions_per_regular_user.setter
    def max_ws_subscriptions_per_regular_user(self, max_ws_subscriptions_per_regular_user):
        """Sets the max_ws_subscriptions_per_regular_user of this DefaultTenantProfileConfiguration.


        :param max_ws_subscriptions_per_regular_user: The max_ws_subscriptions_per_regular_user of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_ws_subscriptions_per_regular_user = max_ws_subscriptions_per_regular_user

    @property
    def max_ws_subscriptions_per_tenant(self):
        """Gets the max_ws_subscriptions_per_tenant of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The max_ws_subscriptions_per_tenant of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_ws_subscriptions_per_tenant

    @max_ws_subscriptions_per_tenant.setter
    def max_ws_subscriptions_per_tenant(self, max_ws_subscriptions_per_tenant):
        """Sets the max_ws_subscriptions_per_tenant of this DefaultTenantProfileConfiguration.


        :param max_ws_subscriptions_per_tenant: The max_ws_subscriptions_per_tenant of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._max_ws_subscriptions_per_tenant = max_ws_subscriptions_per_tenant

    @property
    def rpc_ttl_days(self):
        """Gets the rpc_ttl_days of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The rpc_ttl_days of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._rpc_ttl_days

    @rpc_ttl_days.setter
    def rpc_ttl_days(self, rpc_ttl_days):
        """Sets the rpc_ttl_days of this DefaultTenantProfileConfiguration.


        :param rpc_ttl_days: The rpc_ttl_days of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._rpc_ttl_days = rpc_ttl_days

    @property
    def tenant_entity_export_rate_limit(self):
        """Gets the tenant_entity_export_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The tenant_entity_export_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tenant_entity_export_rate_limit

    @tenant_entity_export_rate_limit.setter
    def tenant_entity_export_rate_limit(self, tenant_entity_export_rate_limit):
        """Sets the tenant_entity_export_rate_limit of this DefaultTenantProfileConfiguration.


        :param tenant_entity_export_rate_limit: The tenant_entity_export_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._tenant_entity_export_rate_limit = tenant_entity_export_rate_limit

    @property
    def tenant_entity_import_rate_limit(self):
        """Gets the tenant_entity_import_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The tenant_entity_import_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tenant_entity_import_rate_limit

    @tenant_entity_import_rate_limit.setter
    def tenant_entity_import_rate_limit(self, tenant_entity_import_rate_limit):
        """Sets the tenant_entity_import_rate_limit of this DefaultTenantProfileConfiguration.


        :param tenant_entity_import_rate_limit: The tenant_entity_import_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._tenant_entity_import_rate_limit = tenant_entity_import_rate_limit

    @property
    def tenant_notification_requests_per_rule_rate_limit(self):
        """Gets the tenant_notification_requests_per_rule_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The tenant_notification_requests_per_rule_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tenant_notification_requests_per_rule_rate_limit

    @tenant_notification_requests_per_rule_rate_limit.setter
    def tenant_notification_requests_per_rule_rate_limit(self, tenant_notification_requests_per_rule_rate_limit):
        """Sets the tenant_notification_requests_per_rule_rate_limit of this DefaultTenantProfileConfiguration.


        :param tenant_notification_requests_per_rule_rate_limit: The tenant_notification_requests_per_rule_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._tenant_notification_requests_per_rule_rate_limit = tenant_notification_requests_per_rule_rate_limit

    @property
    def tenant_notification_requests_rate_limit(self):
        """Gets the tenant_notification_requests_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The tenant_notification_requests_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tenant_notification_requests_rate_limit

    @tenant_notification_requests_rate_limit.setter
    def tenant_notification_requests_rate_limit(self, tenant_notification_requests_rate_limit):
        """Sets the tenant_notification_requests_rate_limit of this DefaultTenantProfileConfiguration.


        :param tenant_notification_requests_rate_limit: The tenant_notification_requests_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._tenant_notification_requests_rate_limit = tenant_notification_requests_rate_limit

    @property
    def tenant_server_rest_limits_configuration(self):
        """Gets the tenant_server_rest_limits_configuration of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The tenant_server_rest_limits_configuration of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tenant_server_rest_limits_configuration

    @tenant_server_rest_limits_configuration.setter
    def tenant_server_rest_limits_configuration(self, tenant_server_rest_limits_configuration):
        """Sets the tenant_server_rest_limits_configuration of this DefaultTenantProfileConfiguration.


        :param tenant_server_rest_limits_configuration: The tenant_server_rest_limits_configuration of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._tenant_server_rest_limits_configuration = tenant_server_rest_limits_configuration

    @property
    def transport_device_msg_rate_limit(self):
        """Gets the transport_device_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The transport_device_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transport_device_msg_rate_limit

    @transport_device_msg_rate_limit.setter
    def transport_device_msg_rate_limit(self, transport_device_msg_rate_limit):
        """Sets the transport_device_msg_rate_limit of this DefaultTenantProfileConfiguration.


        :param transport_device_msg_rate_limit: The transport_device_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._transport_device_msg_rate_limit = transport_device_msg_rate_limit

    @property
    def transport_device_telemetry_data_points_rate_limit(self):
        """Gets the transport_device_telemetry_data_points_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The transport_device_telemetry_data_points_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transport_device_telemetry_data_points_rate_limit

    @transport_device_telemetry_data_points_rate_limit.setter
    def transport_device_telemetry_data_points_rate_limit(self, transport_device_telemetry_data_points_rate_limit):
        """Sets the transport_device_telemetry_data_points_rate_limit of this DefaultTenantProfileConfiguration.


        :param transport_device_telemetry_data_points_rate_limit: The transport_device_telemetry_data_points_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._transport_device_telemetry_data_points_rate_limit = transport_device_telemetry_data_points_rate_limit

    @property
    def transport_device_telemetry_msg_rate_limit(self):
        """Gets the transport_device_telemetry_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The transport_device_telemetry_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transport_device_telemetry_msg_rate_limit

    @transport_device_telemetry_msg_rate_limit.setter
    def transport_device_telemetry_msg_rate_limit(self, transport_device_telemetry_msg_rate_limit):
        """Sets the transport_device_telemetry_msg_rate_limit of this DefaultTenantProfileConfiguration.


        :param transport_device_telemetry_msg_rate_limit: The transport_device_telemetry_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._transport_device_telemetry_msg_rate_limit = transport_device_telemetry_msg_rate_limit

    @property
    def transport_tenant_msg_rate_limit(self):
        """Gets the transport_tenant_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The transport_tenant_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transport_tenant_msg_rate_limit

    @transport_tenant_msg_rate_limit.setter
    def transport_tenant_msg_rate_limit(self, transport_tenant_msg_rate_limit):
        """Sets the transport_tenant_msg_rate_limit of this DefaultTenantProfileConfiguration.


        :param transport_tenant_msg_rate_limit: The transport_tenant_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._transport_tenant_msg_rate_limit = transport_tenant_msg_rate_limit

    @property
    def transport_tenant_telemetry_data_points_rate_limit(self):
        """Gets the transport_tenant_telemetry_data_points_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The transport_tenant_telemetry_data_points_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transport_tenant_telemetry_data_points_rate_limit

    @transport_tenant_telemetry_data_points_rate_limit.setter
    def transport_tenant_telemetry_data_points_rate_limit(self, transport_tenant_telemetry_data_points_rate_limit):
        """Sets the transport_tenant_telemetry_data_points_rate_limit of this DefaultTenantProfileConfiguration.


        :param transport_tenant_telemetry_data_points_rate_limit: The transport_tenant_telemetry_data_points_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._transport_tenant_telemetry_data_points_rate_limit = transport_tenant_telemetry_data_points_rate_limit

    @property
    def transport_tenant_telemetry_msg_rate_limit(self):
        """Gets the transport_tenant_telemetry_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The transport_tenant_telemetry_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transport_tenant_telemetry_msg_rate_limit

    @transport_tenant_telemetry_msg_rate_limit.setter
    def transport_tenant_telemetry_msg_rate_limit(self, transport_tenant_telemetry_msg_rate_limit):
        """Sets the transport_tenant_telemetry_msg_rate_limit of this DefaultTenantProfileConfiguration.


        :param transport_tenant_telemetry_msg_rate_limit: The transport_tenant_telemetry_msg_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._transport_tenant_telemetry_msg_rate_limit = transport_tenant_telemetry_msg_rate_limit

    @property
    def warn_threshold(self):
        """Gets the warn_threshold of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The warn_threshold of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._warn_threshold

    @warn_threshold.setter
    def warn_threshold(self, warn_threshold):
        """Sets the warn_threshold of this DefaultTenantProfileConfiguration.


        :param warn_threshold: The warn_threshold of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: float
        """

        self._warn_threshold = warn_threshold

    @property
    def ws_msg_queue_limit_per_session(self):
        """Gets the ws_msg_queue_limit_per_session of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The ws_msg_queue_limit_per_session of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._ws_msg_queue_limit_per_session

    @ws_msg_queue_limit_per_session.setter
    def ws_msg_queue_limit_per_session(self, ws_msg_queue_limit_per_session):
        """Sets the ws_msg_queue_limit_per_session of this DefaultTenantProfileConfiguration.


        :param ws_msg_queue_limit_per_session: The ws_msg_queue_limit_per_session of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: int
        """

        self._ws_msg_queue_limit_per_session = ws_msg_queue_limit_per_session

    @property
    def ws_updates_per_session_rate_limit(self):
        """Gets the ws_updates_per_session_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501


        :return: The ws_updates_per_session_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ws_updates_per_session_rate_limit

    @ws_updates_per_session_rate_limit.setter
    def ws_updates_per_session_rate_limit(self, ws_updates_per_session_rate_limit):
        """Sets the ws_updates_per_session_rate_limit of this DefaultTenantProfileConfiguration.


        :param ws_updates_per_session_rate_limit: The ws_updates_per_session_rate_limit of this DefaultTenantProfileConfiguration.  # noqa: E501
        :type: str
        """

        self._ws_updates_per_session_rate_limit = ws_updates_per_session_rate_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DefaultTenantProfileConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefaultTenantProfileConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
