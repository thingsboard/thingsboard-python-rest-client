# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard open-source IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 3.5.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2023. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class SlackConversation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'id': 'str',
        'name': 'str',
        'title': 'str',
        'type': 'str',
        'whole_name': 'str'
    }

    attribute_map = {
        'email': 'email',
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'type': 'type',
        'whole_name': 'wholeName'
    }

    def __init__(self, email=None, id=None, name=None, title=None, type=None, whole_name=None):  # noqa: E501
        """SlackConversation - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._id = None
        self._name = None
        self._title = None
        self._type = None
        self._whole_name = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        self.type = type
        if whole_name is not None:
            self.whole_name = whole_name

    @property
    def email(self):
        """Gets the email of this SlackConversation.  # noqa: E501


        :return: The email of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SlackConversation.


        :param email: The email of this SlackConversation.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this SlackConversation.  # noqa: E501


        :return: The id of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SlackConversation.


        :param id: The id of this SlackConversation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SlackConversation.  # noqa: E501


        :return: The name of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SlackConversation.


        :param name: The name of this SlackConversation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this SlackConversation.  # noqa: E501


        :return: The title of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SlackConversation.


        :param title: The title of this SlackConversation.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this SlackConversation.  # noqa: E501


        :return: The type of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SlackConversation.


        :param type: The type of this SlackConversation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["DIRECT", "PRIVATE_CHANNEL", "PUBLIC_CHANNEL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def whole_name(self):
        """Gets the whole_name of this SlackConversation.  # noqa: E501


        :return: The whole_name of this SlackConversation.  # noqa: E501
        :rtype: str
        """
        return self._whole_name

    @whole_name.setter
    def whole_name(self, whole_name):
        """Sets the whole_name of this SlackConversation.


        :param whole_name: The whole_name of this SlackConversation.  # noqa: E501
        :type: str
        """

        self._whole_name = whole_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SlackConversation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlackConversation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
