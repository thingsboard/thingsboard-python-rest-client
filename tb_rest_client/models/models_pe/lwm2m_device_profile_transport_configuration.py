# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 3.5.0PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2023. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six
from tb_rest_client.models.models_pe.device_profile_transport_configuration import DeviceProfileTransportConfiguration  # noqa: F401,E501

class Lwm2mDeviceProfileTransportConfiguration(DeviceProfileTransportConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bootstrap': 'list[LwM2MBootstrapServerCredential]',
        'bootstrap_server_update_enable': 'bool',
        'client_lw_m2m_settings': 'OtherConfiguration',
        'observe_attr': 'TelemetryMappingConfiguration'
    }
    if hasattr(DeviceProfileTransportConfiguration, "swagger_types"):
        swagger_types.update(DeviceProfileTransportConfiguration.swagger_types)

    attribute_map = {
        'bootstrap': 'bootstrap',
        'bootstrap_server_update_enable': 'bootstrapServerUpdateEnable',
        'client_lw_m2m_settings': 'clientLwM2mSettings',
        'observe_attr': 'observeAttr'
    }
    if hasattr(DeviceProfileTransportConfiguration, "attribute_map"):
        attribute_map.update(DeviceProfileTransportConfiguration.attribute_map)

    def __init__(self, bootstrap=None, bootstrap_server_update_enable=None, client_lw_m2m_settings=None, observe_attr=None, *args, **kwargs):  # noqa: E501
        """Lwm2mDeviceProfileTransportConfiguration - a model defined in Swagger"""  # noqa: E501
        self._bootstrap = None
        self._bootstrap_server_update_enable = None
        self._client_lw_m2m_settings = None
        self._observe_attr = None
        self.discriminator = None
        if bootstrap is not None:
            self.bootstrap = bootstrap
        if bootstrap_server_update_enable is not None:
            self.bootstrap_server_update_enable = bootstrap_server_update_enable
        if client_lw_m2m_settings is not None:
            self.client_lw_m2m_settings = client_lw_m2m_settings
        if observe_attr is not None:
            self.observe_attr = observe_attr
        DeviceProfileTransportConfiguration.__init__(self, *args, **kwargs)

    @property
    def bootstrap(self):
        """Gets the bootstrap of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501


        :return: The bootstrap of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501
        :rtype: list[LwM2MBootstrapServerCredential]
        """
        return self._bootstrap

    @bootstrap.setter
    def bootstrap(self, bootstrap):
        """Sets the bootstrap of this Lwm2mDeviceProfileTransportConfiguration.


        :param bootstrap: The bootstrap of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501
        :type: list[LwM2MBootstrapServerCredential]
        """

        self._bootstrap = bootstrap

    @property
    def bootstrap_server_update_enable(self):
        """Gets the bootstrap_server_update_enable of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501


        :return: The bootstrap_server_update_enable of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._bootstrap_server_update_enable

    @bootstrap_server_update_enable.setter
    def bootstrap_server_update_enable(self, bootstrap_server_update_enable):
        """Sets the bootstrap_server_update_enable of this Lwm2mDeviceProfileTransportConfiguration.


        :param bootstrap_server_update_enable: The bootstrap_server_update_enable of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501
        :type: bool
        """

        self._bootstrap_server_update_enable = bootstrap_server_update_enable

    @property
    def client_lw_m2m_settings(self):
        """Gets the client_lw_m2m_settings of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501


        :return: The client_lw_m2m_settings of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501
        :rtype: OtherConfiguration
        """
        return self._client_lw_m2m_settings

    @client_lw_m2m_settings.setter
    def client_lw_m2m_settings(self, client_lw_m2m_settings):
        """Sets the client_lw_m2m_settings of this Lwm2mDeviceProfileTransportConfiguration.


        :param client_lw_m2m_settings: The client_lw_m2m_settings of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501
        :type: OtherConfiguration
        """

        self._client_lw_m2m_settings = client_lw_m2m_settings

    @property
    def observe_attr(self):
        """Gets the observe_attr of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501


        :return: The observe_attr of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501
        :rtype: TelemetryMappingConfiguration
        """
        return self._observe_attr

    @observe_attr.setter
    def observe_attr(self, observe_attr):
        """Sets the observe_attr of this Lwm2mDeviceProfileTransportConfiguration.


        :param observe_attr: The observe_attr of this Lwm2mDeviceProfileTransportConfiguration.  # noqa: E501
        :type: TelemetryMappingConfiguration
        """

        self._observe_attr = observe_attr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Lwm2mDeviceProfileTransportConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lwm2mDeviceProfileTransportConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
