# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 3.5.0PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2023. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class ShortEntityView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'EntityId',
        'name': 'str',
        'created_time': 'int',
        'device_profile': 'str',
        'label': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'created_time': 'created_time',
        'device_profile': 'device_profile',
        'label': 'label'
    }

    def __init__(self, id=None, name=None, label=None, device_profile=None, created_time=None):  # noqa: E501
        """ShortEntityView - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._label = None
        self._device_profile_id = None
        self._created_time = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.label = label
        self.device_profile = device_profile
        self.created_time = created_time

    @property
    def label(self):
        return self._label

    @label.setter
    def label(self, val):
        self._label = val

    @property
    def device_profile(self):
        return self._device_profile

    @device_profile.setter
    def device_profile(self, val):
        self._device_profile = val

    @property
    def created_time(self):
        return self._created_time

    @created_time.setter
    def created_time(self, val):
        self._created_time = val

    @property
    def id(self):
        """Gets the id of this ShortEntityView.  # noqa: E501


        :return: The id of this ShortEntityView.  # noqa: E501
        :rtype: EntityId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShortEntityView.


        :param id: The id of this ShortEntityView.  # noqa: E501
        :type: EntityId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ShortEntityView.  # noqa: E501

        Name of the entity  # noqa: E501

        :return: The name of this ShortEntityView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShortEntityView.

        Name of the entity  # noqa: E501

        :param name: The name of this ShortEntityView.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShortEntityView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShortEntityView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
