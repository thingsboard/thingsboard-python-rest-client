# coding: utf-8

"""
    ThingsBoard REST API

     ThingsBoard Professional Edition IoT platform REST API documentation.  # noqa: E501

    OpenAPI spec version: 3.5.0PE
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

#  Copyright 2023. ThingsBoard
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import pprint
import re  # noqa: F401

import six

class EntityDataInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_attributes': 'bool',
        'has_credentials': 'bool',
        'has_group_entities': 'bool',
        'has_permissions': 'bool',
        'has_relations': 'bool'
    }

    attribute_map = {
        'has_attributes': 'hasAttributes',
        'has_credentials': 'hasCredentials',
        'has_group_entities': 'hasGroupEntities',
        'has_permissions': 'hasPermissions',
        'has_relations': 'hasRelations'
    }

    def __init__(self, has_attributes=None, has_credentials=None, has_group_entities=None, has_permissions=None, has_relations=None):  # noqa: E501
        """EntityDataInfo - a model defined in Swagger"""  # noqa: E501
        self._has_attributes = None
        self._has_credentials = None
        self._has_group_entities = None
        self._has_permissions = None
        self._has_relations = None
        self.discriminator = None
        if has_attributes is not None:
            self.has_attributes = has_attributes
        if has_credentials is not None:
            self.has_credentials = has_credentials
        if has_group_entities is not None:
            self.has_group_entities = has_group_entities
        if has_permissions is not None:
            self.has_permissions = has_permissions
        if has_relations is not None:
            self.has_relations = has_relations

    @property
    def has_attributes(self):
        """Gets the has_attributes of this EntityDataInfo.  # noqa: E501


        :return: The has_attributes of this EntityDataInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_attributes

    @has_attributes.setter
    def has_attributes(self, has_attributes):
        """Sets the has_attributes of this EntityDataInfo.


        :param has_attributes: The has_attributes of this EntityDataInfo.  # noqa: E501
        :type: bool
        """

        self._has_attributes = has_attributes

    @property
    def has_credentials(self):
        """Gets the has_credentials of this EntityDataInfo.  # noqa: E501


        :return: The has_credentials of this EntityDataInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_credentials

    @has_credentials.setter
    def has_credentials(self, has_credentials):
        """Sets the has_credentials of this EntityDataInfo.


        :param has_credentials: The has_credentials of this EntityDataInfo.  # noqa: E501
        :type: bool
        """

        self._has_credentials = has_credentials

    @property
    def has_group_entities(self):
        """Gets the has_group_entities of this EntityDataInfo.  # noqa: E501


        :return: The has_group_entities of this EntityDataInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_group_entities

    @has_group_entities.setter
    def has_group_entities(self, has_group_entities):
        """Sets the has_group_entities of this EntityDataInfo.


        :param has_group_entities: The has_group_entities of this EntityDataInfo.  # noqa: E501
        :type: bool
        """

        self._has_group_entities = has_group_entities

    @property
    def has_permissions(self):
        """Gets the has_permissions of this EntityDataInfo.  # noqa: E501


        :return: The has_permissions of this EntityDataInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_permissions

    @has_permissions.setter
    def has_permissions(self, has_permissions):
        """Sets the has_permissions of this EntityDataInfo.


        :param has_permissions: The has_permissions of this EntityDataInfo.  # noqa: E501
        :type: bool
        """

        self._has_permissions = has_permissions

    @property
    def has_relations(self):
        """Gets the has_relations of this EntityDataInfo.  # noqa: E501


        :return: The has_relations of this EntityDataInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_relations

    @has_relations.setter
    def has_relations(self, has_relations):
        """Sets the has_relations of this EntityDataInfo.


        :param has_relations: The has_relations of this EntityDataInfo.  # noqa: E501
        :type: bool
        """

        self._has_relations = has_relations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityDataInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityDataInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
